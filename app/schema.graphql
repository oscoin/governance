scalar Datetime

type Author {
  name: String
  email: String
}

# git commit data.
type Commit {
  sha1: String!
  author: Author!
  date: Datetime!
  message: String!
  refs: [Ref]
  objectName: ObjectName!
}

# file info and metadata.
type Info {
  # base name of the file.
  name: String!
  # length in bytes.
  size: Int!
  # if it's a directory.
  isDirectory: Boolean!
  # any flags git stores, currently only executable.
  flags: [Int]!
  # last commit which affected this path.
  lastcommit: Commit!
}

type BlobEntry {
  content: String!
  info: Info!
}

type TreeEntry {
  path: String!
  info: Info!
}

# Representation of a refname. Special refs like HEAD are omitted on purpose as
# of now.
#
# master
# v1.0.0
# heads/master
# tags/v1.0.0
# remotes/origin/master
type Ref = {
  name: String!
  sha1: String!
}

type Query {
  # Source browsing.
  blob(projectId: ID!, revision: String!, path: String!): BlobEntry
  tree(projectId: ID!, revision: String!, prefix: String!): [TreeEntry!]!

  # Commits browsing
  commits(projectId: ID!, Revision: String!): [Commit]!
  commit(projectId: ID!, sha1: String!): Commit

  # Ref browsing
  branches(projectId: ID!): [Ref]!
  refs(projectId: ID!): [Ref]!
  tags(projectId: ID!): [Ref]!
}

################
# Exploration. #

enum ObjectType {
  Commit
  Tree
  Blob
  Tag
}

# git tags.
type LightweightTag {
  commit: Commit!
}

type AnnotatedTag {
  objectName: ObjectName!
  type: ObjectType!
  name: String!
  tagger: Author!
}

union Tag = AnnotatedTag | LightweightTag

# Representation of object name.
type ObjectName {
  sha1: String!
}
type Refname {
  name: String!
}

# Representation of gitrevisions: https://git-scm.com/docs/gitrevisions/
union Revision = ObjectName | RefName
