scalar Datetime

type Person {
  name: String
  email: String
  avatar: String
}

# git commit data.
type Commit {
  sha1: String!
  author: Person!        # the author of the code in the commit
  authorDate: Datetime!  # when commit was authored
  committer: Person!     # person who committed (or merged) the code (low-prio)
  commitDate: Datetime!  # when commit or merge happened (low-prio)
  subject: String!
  body: String!          # commit message body (low-prio)
  message: String!       # full commit message: subject + body (low-prio)
}

# file info and metadata.
type Info {
  name: String!          # base name of the file
  size: Int!             # length in bytes (low-prio)
  isDirectory: Boolean!  # if it's a directory
  flags: [Int]!          # any flags git stores, currently only executable (low-prio)
  lastcommit: Commit!    # last commit which affected this path
}

type Blob {
  content: String!
  info: Info!
}

type Tree {
  path: String
  info: Info
  entries: [TreeEntry!]!
}

type TreeEntry {
  path: String
  info: Info
}

# Representation of a refname. Special refs like HEAD are omitted on purpose as
# of now.
#
# master
# v1.0.0
# heads/master
# tags/v1.0.0
# remotes/origin/master
type Ref = {
  name: String!
  sha1: String!
}

type Query {
  # Source browsing.
  blob(projectId: ID!, revision: String!, path: String!): Blob!
  tree(projectId: ID!, revision: String!, prefix: String!): Tree!

  # Commits browsing
  commits(projectId: ID!, Revision: String!): [Commit]!
  commit(projectId: ID!, sha1: String!): Commit

  # Ref browsing
  branches(projectId: ID!): [Ref]!
  refs(projectId: ID!): [Ref]!
  tags(projectId: ID!): [Ref]!
}

################
# Exploration. #

enum ObjectType {
  Commit
  Tree
  Blob
  Tag
}

# git tags.
type LightweightTag {
  commit: Commit!
}

type AnnotatedTag {
  objectName: ObjectName!
  type: ObjectType!
  name: String!
  tagger: Author!
}

union Tag = AnnotatedTag | LightweightTag

# Representation of object name.
type ObjectName {
  sha1: String!
}
type Refname {
  name: String!
}

# Representation of gitrevisions: https://git-scm.com/docs/gitrevisions/
union Revision = ObjectName | RefName
