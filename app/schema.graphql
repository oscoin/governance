scalar Datetime

type Author {
  name: String
  email: String
}

enum ObjectType {
  Commit
  Tree
  Blob
  Tag
}

# git tags.
type Lightweighttag {
  commit: Commit!
}

type Annotatedtag {
  object: String!
  type: ObjectType!
  name: String!
  tagger: Author!
}

union Tag = AnnotatedTag | LightweightTag

type Head {
  name: String!
  commit: Commit!
}

union Ref = Head | Tag

# git commit data.
type Commit {
  author: Author!
  date: Datetime!
  message: String!
  refs: [Ref]
}

# file info and metadata.
type Info {
  # base name of the file.
  name: String!
  # length in bytes.
  size: Int!
  # if it's a directory.
  isdirectory: Boolean!
  # any flags git stores, currently only executable.
  flags: [Int]!
  # last commit which affected this path.
  lastcommit: Commit!
}

type BlobEntry {
  content: String!
  info: Info!
}

type TreeEntry {
  path: String!
  info: Info!
}

# Representation of object name.
type ObjectName {
  sha1: String!
}

# Representation of a refname.
#
# master
# v1.0.0
# refs/heads/master
# refs/tags/v1.0.0
# refs/remotes/origin/master
type Refname {
  name: String!
}

# Representation of gitrevisions: https://git-scm.com/docs/gitrevisions/
union Revision = ObjectName | RefName

type Query {
  # Source browsing.
  blob(projectId: ID!, revision: Revision!, path: String!): [BlobEntry]!
  tree(projectId: ID!, revision: Revision!, prefix: String!): [TreeEntry]!

  # Commits browsing
  commits(projectId, Revision: Revision!): [Commit]!
  commit(projectId, objectName: ObjectName!) Commit

  # Ref browsing
  branches(projectId: ID!): [Head]!
  refs(projectId: ID!): [Ref]!
  tags(projectId: ID!): [Tag]!
}
